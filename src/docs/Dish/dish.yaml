paths:
  /api/dishes:
    get:
      tags:
        - Dishes
      summary: Get all dishes
      description: Retrieve a list of all dishes.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dish'
        '422':
          description: Unprocessable entity. An error occurred while processing the request.
    post:
      tags:
        - Dishes
      summary: Add a new dish
      description: Add a new dish to the system.
      requestBody:
        description: Dish data to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DishInput'
      responses:
        '201':
          description: Dish created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dish'
        '422':
          description: Unprocessable entity. An error occurred while processing the request.

  /api/dishes/{id}:
    get:
      tags:
        - Dishes
      summary: Get a dish by ID
      description: Retrieve a dish by its unique ID.
      parameters:
        - name: id
          in: path
          description: ID of the dish to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dish'
        '422':
          description: Unprocessable entity. An error occurred while processing the request.
        '404':
          description: The dish with the specified ID was not found.
    put:
      tags:
        - Dishes
      summary: Update a dish by ID
      description: Update an existing dish by its unique ID.
      parameters:
        - name: id
          in: path
          description: ID of the dish to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Updated dish data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DishInput'
      responses:
        '200':
          description: Dish updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dish'
        '422':
          description: Unprocessable entity. An error occurred while processing the request.
        '403':
          description: Forbidden. You don't have permission to update this dish.
        '404':
          description: The dish with the specified ID was not found.
    delete:
      tags:
        - Dishes
      summary: Delete a dish by ID
      description: Delete a dish by its unique ID.
      parameters:
        - name: id
          in: path
          description: ID of the dish to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Dish deleted successfully.
        '422':
          description: Unprocessable entity. An error occurred while processing the request.
        '403':
          description: Forbidden. You don't have permission to delete this dish.
        '404':
          description: The dish with the specified ID was not found.

  /api/dishes/filter:
    get:
      tags:
        - Dishes
      summary: Filter dishes
      description: Retrieve a list of dishes based on specified filters.
      parameters:
        - name: name
          in: query
          description: Name of the dish to filter (case-insensitive).
          schema:
            type: string
          example: Chicken Tikka
        - name: maxPrice
          in: query
          description: Maximum price of the dish to filter.
          schema:
            type: number
            format: float
          example: 400
        - name: minPrice
          in: query
          description: Minimum price of the dish to filter.
          schema:
            type: number
            format: float
          example: 200
        - name: minRate
          in: query
          description: Minimum rating of the dish to filter.
          schema:
            type: integer
          example: 4
        - name: maxRate
          in: query
          description: Maximum rating of the dish to filter.
          schema:
            type: integer
          example: 4
        - name: ingredients
          in: query
          description: Comma-separated list of ingredients to filter dishes by.
          schema:
            type: string
          example: Meet,Tomato
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dish'
        '500':
          description: Internal server error. An error occurred while processing the request.


  /api/dishes/image/{id}:
    put:
      tags:
        - Dishes
      summary: Upload an image for dish by its id.
      description: Upload an image for dish by its id.
      parameters:
        - name: id
          in: path
          description: The ID of the dish for which to upload an image.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: The image file to upload (JPEG, PNG, etc.).
      responses:
        '200':
          description: Image uploaded successfully
        '401':
          description: Unauthenticated. Please check if you are logged in.
        '422':
          description: Invalid input
        '500':
          description: Internal Server Error


    
components:
  schemas:
    Dish:
      type: object
      properties:
        _id:
          type: string
          description: Unique ID of the dish.
          example: 6131234567890123456789abc
        name:
          type: string
          description: Name of the dish.
          example: Chicken Alfredo Pasta
        chefId:
          type: string
          description: ID of the chef associated with the dish.
          example: 6131234567890123456789def
        description:
          type: string
          description: Description of the dish.
          example: A delicious pasta dish with creamy Alfredo sauce.
        image:
          type: string
          description: URL of the dish's image.
          example: https://example.com/dishes/chicken_alfredo.jpg
        ingredients:
          type: array
          items:
            type: string
          description: List of ingredients used in the dish.
          example:
            - Chicken
            - Alfredo Sauce
            - Pasta
        price:
          type: number
          format: float
          description: Price of the dish.
          example: 15.99
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
          description: List of reviews for the dish.
    DishInput:
      type: object
      properties:
        name:
          type: string
          description: Name of the dish.
          example: Chicken Alfredo Pasta
        chefId:
          type: string
          description: ID of the chef associated with the dish.
          example: 6131234567890123456789def
        description:
          type: string
          description: Description of the dish.
          example: A delicious pasta dish with creamy Alfredo sauce.
        image:
          type: string
          description: URL of the dish's image.
          example: https://example.com/dishes/chicken_alfredo.jpg
        ingredients:
          type: array
          items:
            type: string
          description: List of ingredients used in the dish.
          example:
            - Chicken
            - Alfredo Sauce
            - Pasta
        price:
          type: number
          format: float
          description: Price of the dish.
          example: 15.99
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
          description: List of reviews for the dish.
    Review:
      type: object
      properties:
        rating:
          type: integer
          description: Rating for the dish (out of 5).
          example: 4
        comment:
          type: string
          description: Comment/review for the dish.
          example: This dish was amazing! Highly recommended.
